# -*- coding: utf-8 -*-
"""A simple DL model using Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-_JQg5ioFcz8sk5i3LzbnTr5rxbE4IZ7

A Simple Deep Learning model using keras.
---



---


**Keras Model Life-Cycle
Below is an overview of the 5 steps in the neural network model life-cycle in Keras:**
1. Analyze the dataset
2. Prepare the data Set
3. Define Network.
4. Compile Network.
5. Fit Network.
6. Evaluate Network.
7. Make Predictions.

---



---
"""

!pip install tensorflow==2.0.0-beta1 #Tensorflow beta version
import tensorflow as tf
print(tf.__version__) # Check the version

"""Preparing the data : 

First, we import the data. It is made up of 60,000 images for the training set and 10,000 images for the test set:
"""

import tensorflow as tf # import tensorflow as tf for faster typing 
import numpy as np      # import numerical python as np
 
num_classes = 10
img_rows, img_cols = 28, 28
num_channels = 1
input_shape = (img_rows, img_cols, num_channels)
(x_train, y_train),(x_test, y_test) =  tf.keras.datasets.mnist.load_data()     #load the datasets
x_train, x_test = x_train / 255.0, x_test / 255.0 #DataNormalization

"""Define Network"""

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dense(num_classes, activation='softmax'))

"""Compile Network

Calling .compile() on the model we just created is a mandatory step. A few arguments must be specified:

optimizer: This is the component that will perform the gradient descent.

loss: This is the metric we will optimize. In our case, we choose 
cross-entropy, just like in the previous chapter.

metrics: These are additional metric functions evaluated during training to provide further visibility of the modelâ€™s performance (unlike loss, they are not used in the optimization process).
"""

model.compile(optimizer='sgd',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

"""Fit Network"""

model.fit(x_train, y_train, epochs=5, verbose=1, validation_data=(x_test, y_test))

"""Evaluate the model:"""

model.evaluate(x_test,y_test)

